USE [iMonnit]
GO

/****** Object:  StoredProcedure [dbo].[Report_LoadATTAutoExport_ReRun]    Script Date: 6/28/2024 4:08:59 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Report_LoadATTAutoExport_ReRun] 
	@AccountID BIGINT,
	@ExportStatisticsID BIGINT
AS
	DECLARE @FirstDataMessage DATETIME,
		@LastDataMessage DATETIME,
		@Count INT

	SELECT @FirstDataMessage = FirstMessageID, @LastDataMessage = LastMessageID 
	FROM ExportStatistics 
	WHERE ExportStatisticsID = @ExportStatisticsID
	
	DECLARE @DataMessages TABLE
	(
		DataMessageGUID UNIQUEIDENTIFIER,
		SensorID bigint,
		MessageDate DateTime,
		State int,
		SignalStrength int,
		LinkQuality int,
		Battery int,
		Data varchar(2000),
		Voltage Decimal(5,4),
		MeetsNotificationRequirement bit,
		InsertDate datetime,
		GatewayID bigint,
		AccountID bigint,
		ApplicationID bigint,
		CSNetID bigint,
		SensorName nvarchar(255),
		ReportInterval decimal(18, 3),
		ActiveStateInterval decimal(18, 3),
		MinimumCommunicationFrequency int,
		LastCommunicationDate datetime,
		IsDirty bit,
		ChannelMask bigint,
		StandardMessageDelay int,
		TransmitIntervalLink int,
		TransmitIntervalTest int,
		TestTransmitCount int,
		MaximumNetworkHops int,
		RetryCount int,
		Recovery int,
		TimeOfDayActive varbinary(max),
		MeasurementsPerTransmission int,
		TransmitOffset int,
		Hysteresis bigint,
		MinimumThreshold bigint,
		MaximumThreshold bigint,
		Calibration1 bigint,
		Calibration2 bigint,
		Calibration3 bigint,
		Calibration4 bigint,
		EventDetectionType int,
		EventDetectionPeriod int,
		EventDetectionCount int,
		RearmTime int,
		BiStable int,
		PendingActionControlCommand bit,
		IsActive bit,
		FirmwareVersion varchar(255),
		RadioBand varchar(255),
		PowerSourceID bigint,
		IsSleeping bit,
		ExternalID varchar(255),
		IsDirtyProfile bit,
		LastDataMessageID bigint,
		IsDirtyGeneral2 bit,
		IsDirtyProfile2 bit,
		eWitType int,
		SensorTypeID bigint,
		ForceToBootloader bit,
		DataLog bit,
		TagString varchar(2000),
		IsDeleted bit,
		IsNewToNetwork bit,
		CreateDate datetime,
		SensorApplicationID bigint,
		CalibrationCertification varchar(255),
		SensorhoodConfigDirty bit,
		SensorhoodID bigint,
		SensorhoodTransmitions int,
		CalibrationCertificationValidUntil datetime,
		CalibrationFacilityID bigint,
		ParentID bigint,
		resumeNotificationDate datetime,
		ListenBeforeTalk bit,
		IsDirtyGeneral3 bit,
		ListenBeforeTalkValue int,
		Make varchar(255),
		Model varchar(255),
		SerialNumber varchar(255),
		Description varchar(255)
	)
	
	
	INSERT INTO @DataMessages (DataMessageGUID,
		SensorID,
		MessageDate,
		State,
		SignalStrength,
		LinkQuality,
		Battery,
		Data,
		Voltage,
		MeetsNotificationRequirement,
		InsertDate,
		GatewayID,
		AccountID,
		ApplicationID,
		CSNetID,
		SensorName,
		ReportInterval,
		ActiveStateInterval,
		MinimumCommunicationFrequency,
		LastCommunicationDate,
		IsDirty,
		ChannelMask,
		StandardMessageDelay,
		TransmitIntervalLink,
		TransmitIntervalTest,
		TestTransmitCount,
		MaximumNetworkHops,
		RetryCount,
		Recovery,
		TimeOfDayActive,
		MeasurementsPerTransmission,
		TransmitOffset,
		Hysteresis,
		MinimumThreshold,
		MaximumThreshold,
		Calibration1,
		Calibration2,
		Calibration3,
		Calibration4,
		EventDetectionType,
		EventDetectionPeriod,
		EventDetectionCount,
		RearmTime,
		BiStable,
		PendingActionControlCommand,
		IsActive,
		FirmwareVersion,
		RadioBand,
		PowerSourceID,
		IsSleeping,
		ExternalID,
		IsDirtyProfile,
		LastDataMessageID,
		IsDirtyGeneral2,
		IsDirtyProfile2,
		eWitType,
		SensorTypeID,
		ForceToBootloader,
		DataLog,
		TagString,
		IsDeleted,
		IsNewToNetwork,
		CreateDate,
		SensorApplicationID,
		CalibrationCertification,
		SensorhoodConfigDirty,
		SensorhoodID,
		SensorhoodTransmitions,
		CalibrationCertificationValidUntil,
		CalibrationFacilityID,
		ParentID,
		resumeNotificationDate,
		ListenBeforeTalk,
		IsDirtyGeneral3,
		ListenBeforeTalkValue,
		Make,
		Model,
		SerialNumber,
		Description)
		SELECT 
			dm.DataMessageGUID,
			dm.SensorID,
			dm.MessageDate,
			dm.State,
			dm.SignalStrength,
			dm.LinkQuality,
			dm.Battery,
			dm.Data,
			dm.Voltage,
			dm.MeetsNotificationRequirement,
			dm.InsertDate,
			dm.GatewayID,
			s.AccountID,
			s.ApplicationID,
			s.CSNetID,
			s.SensorName,
			s.ReportInterval,
			s.ActiveStateInterval,
			s.MinimumCommunicationFrequency,
			s.LastCommunicationDate,
			s.IsDirty,
			s.ChannelMask,
			s.StandardMessageDelay,
			s.TransmitIntervalLink,
			s.TransmitIntervalTest,
			s.TestTransmitCount,
			s.MaximumNetworkHops,
			s.RetryCount,
			s.Recovery,
			s.TimeOfDayActive,
			s.MeasurementsPerTransmission,
			s.TransmitOffset,
			s.Hysteresis,
			s.MinimumThreshold,
			s.MaximumThreshold,
			s.Calibration1,
			s.Calibration2,
			s.Calibration3,
			s.Calibration4,
			s.EventDetectionType,
			s.EventDetectionPeriod,
			s.EventDetectionCount,
			s.RearmTime,
			s.BiStable,
			s.PendingActionControlCommand,
			s.IsActive,
			s.FirmwareVersion,
			s.RadioBand,
			s.PowerSourceID,
			s.IsSleeping,
			s.ExternalID,
			s.IsDirtyProfile,
			s.LastDataMessageID,
			s.IsDirtyGeneral2,
			s.IsDirtyProfile2,
			s.eWitType,
			s.SensorTypeID,
			s.ForceToBootloader,
			s.DataLog,
			s.TagString,
			s.IsDeleted,
			s.IsNewToNetwork,
			s.CreateDate,
			s.SensorApplicationID,
			s.CalibrationCertification,
			s.SensorhoodConfigDirty,
			s.SensorhoodID,
			s.SensorhoodTransmitions,
			s.CalibrationCertificationValidUntil,
			s.CalibrationFacilityID,
			s.ParentID,
			s.resumeNotificationDate,
			s.ListenBeforeTalk,
			s.IsDirtyGeneral3,
			s.ListenBeforeTalkValue,
			s.Make,
			s.Model,
			s.SerialNumber,
			s.Description
		FROM DataMessage dm
		INNER JOIN Sensor s ON s.SensorID = dm.SensorID
		INNER JOIN CSNet c on c.CSNetID = s.CSNetID
		INNER JOIN Account a ON a.AccountID = C.AccountID
		WHERE a.RetailAccountID = @AccountID 
		AND dm.MessageDate >= @FirstDataMessage
		AND dm.MessageDate <= @LastDataMessage
		ORDER BY dm.MessageDate

	SELECT * from @DataMessages
	
	SELECT DISTINCT sa.*
	FROM SensorAttribute sa
	INNER JOIN @DataMessages dm ON dm.SensorID = sa.SensorID

	SELECT @Count = ISNULL(COUNT(MessageDate),0)
	FROM @DataMessages

	SELECT * FROM ExportStatistics WHERE ExportStatisticsID = @ExportStatisticsID
	
	SELECT @FirstDataMessage


GO


