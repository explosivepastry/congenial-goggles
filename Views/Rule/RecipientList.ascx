<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<List<NotificationRecipientData>>" %>
<%=""%><!--Workaround to eliminate IntelliSense error CS0103 instances for "The name '__o' does not exist in the current context", caused by the temporary variable "__o" generated by ASP.NET -->

<script>
    const valuesArrayInStrings = ["<%: Html.TranslateTag("Off")%>", "<%: Html.TranslateTag("No Delay")%>", "<%: Html.TranslateTag("2 Minutes")%>", "<%: Html.TranslateTag("5 Minutes")%>", "<%: Html.TranslateTag("10 Minutes")%>", "<%: Html.TranslateTag("15 Minutes")%>", "<%: Html.TranslateTag("30 Minutes")%>", "<%: Html.TranslateTag("45 Minutes")%>", "<%: Html.TranslateTag("1 Hour")%>", "<%: Html.TranslateTag("2 Hours")%>", "<%: Html.TranslateTag("4 Hours")%>", "<%: Html.TranslateTag("6 Hours")%>", "<%: Html.TranslateTag("8 Hours")%>", "<%: Html.TranslateTag("10 Hours")%>", "<%: Html.TranslateTag("12 Hours")%>", "<%: Html.TranslateTag("16 Hours")%>", "<%: Html.TranslateTag("20 Hours")%>", "<%: Html.TranslateTag("24 Hours")%>"]
    const valuesArrayInNumbers = [-1, 0, 2, 5, 10, 15, 30, 45, 60, 120, 240, 360, 480, 600, 720, 960, 1200, 1440];
</script>

<div class="msg-user_container">
    <%  
        eNotificationType viewAction = (eNotificationType)ViewBag.NotificationType;
        string sendToString = "";
        List<NotificationRecipient> recipients = ViewBag.NotificationRecipients as List<NotificationRecipient>;

        int count = 0;
        int uniqueId = 0;
        foreach (NotificationRecipientData cust in Model)
        {
            uniqueId++;

            //Removed to allow more than emails notis to work.
            //if (cust.CustomerGroupID > 0 && viewAction != eNotificationType.Email)
            //    continue;

            NotificationRecipient recipient = null;
            if (cust.CustomerGroupID > 0)
                recipient = recipients.Where(x => x.CustomerGroupID == cust.CustomerGroupID && x.NotificationType == eNotificationType.Group).FirstOrDefault();
            else
                recipient = recipients.Where(x => x.CustomerToNotifyID == cust.CustomerID && x.NotificationType == viewAction).FirstOrDefault();

            bool isInProgress = recipient != null;

            string delayLabel = "Min";
            int delayMinutes = -1; ;



            if (isInProgress)
            {
                delayMinutes = recipient.DelayMinutes;
                if (delayMinutes > 1 && delayMinutes < 60)
                {
                    delayLabel = "Mins";
                }

                if (delayMinutes == 60)
                {
                    delayLabel = "Hr";
                    delayMinutes = 1;
                }

                if (delayMinutes > 60)
                {
                    delayLabel = "Hrs";
                    delayMinutes = (delayMinutes / 60);
                }

            }


            switch (viewAction)
            {
                case eNotificationType.SMS:
                    if (string.IsNullOrEmpty(cust.NotificationPhone) && cust.CustomerGroupID < 0)
                        continue;
                    count++;
                    sendToString = cust.NotificationPhone;
                    break;
                case eNotificationType.Phone:
                    if (string.IsNullOrEmpty(cust.NotificationPhone2) && cust.CustomerGroupID < 0)
                        continue;
                    count++;
                    sendToString = cust.NotificationPhone2;
                    break;
                default:
                case eNotificationType.Email:
                    if (string.IsNullOrEmpty(cust.NotificationEmail) && cust.CustomerGroupID < 0)
                        continue;
                    count++;
                    sendToString = cust.NotificationEmail;
                    break;
            }

    %>
    <!-- Contact Person -->

    <div id="openSpinnerModelForId_<%=uniqueId %>" filter="<%: cust.FullName.ToLower() + " " + sendToString %>" class="recipientHolder user-card_container notifyUser user-dets  <%=isInProgress ? "selected" : ""%>" data-notitype="<%=viewAction.ToString() %>" data-delay="<%=isInProgress ? recipient.DelayMinutes : -1 %>" data-id="<%=cust.CustomerID %>" data-name="<%=cust.FullName %>" data-groupid="<%=cust.CustomerGroupID %>">
        <div class="uc-delay grid-item-0 ">
            <span class="fw-bold" id="delayValue_<%=uniqueId%>" data-delay="<%=isInProgress ? recipient.DelayMinutes : -1 %>">
                <%=(isInProgress && recipient.DelayMinutes >= 0) ? (recipient.DelayMinutes == 0 ? "No Delay" :  Html.TranslateTag("Delay") + ": " + delayMinutes + " " + delayLabel) : "" %>
            </span>
        </div>
        <input type="hidden" id="userHiddenInputValue_<%=uniqueId %>" />
        <div class="msg-user-icon grid-item-1">
            <%=Html.GetThemedSVG("accountDetails") %>
        </div>
        <div class="select-contacts">
            <div class="">
                <span class="uc-name">
                    <%=cust.FullName %>
                </span>
            </div>
            <div class="">
                <span class="us-email">
                    <%=sendToString%>
                </span>
            </div>
        </div>
    </div>

        <script>

        const inputElement<%=uniqueId %> = document.getElementById('userHiddenInputValue_<%=uniqueId %>');
        const spanElement<%=uniqueId %> = document.getElementById('delayValue_<%=uniqueId %>');
        const userCardElement<%=uniqueId %> = document.getElementById('openSpinnerModelForId_<%=uniqueId %>');

        const observer<%=uniqueId %> = new MutationObserver(function (mutationsList, observer) {

            for (let mutation of mutationsList) {

                if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
                    const numberValue<%=uniqueId %> = StringToNumber(inputElement<%=uniqueId %>.value);
                    spanElement<%=uniqueId %>.dataset.delay = numberValue<%=uniqueId %>;
                    spanElement<%=uniqueId %>.textContent = inputElement<%=uniqueId %>.value;
                    userCardElement<%=uniqueId %>.dataset.delay = numberValue<%=uniqueId %>;

                    if (numberValue<%=uniqueId %> >= 0) {
                        userCardElement<%=uniqueId %>.classList.add("selected");
                    } else {
                        userCardElement<%=uniqueId %>.classList.remove("selected");
                    }
                }
            }
        });

        observer<%=uniqueId %>.observe(inputElement<%=uniqueId %>, { attributes: true });
        createSpinnerModal("openSpinnerModelForId_<%=uniqueId %>", "Delay Notification By", "userHiddenInputValue_<%=uniqueId %>", valuesArrayInStrings, 0);
    </script>
    <!-- End Contact Person -->
    <%} %>

    <%if (count == 0 && MonnitSession.CustomerCan("Navigation_View_My_Account"))
        {
            switch (viewAction)
            {
                case eNotificationType.SMS:

    %><div><%:Html.TranslateTag("No SMS Recipients found, update a user with SMS contact info.")%></div>

    <%            break;


        case eNotificationType.Phone:
    %>

    <div><%:Html.TranslateTag("No SMS Recipients found, update a user with SMS contact info.") %></div>

    <% break;

        case eNotificationType.Email:%>


    <div><%:Html.TranslateTag("No Email Recipients found, update a user with Email contact info.") %></div>

    <% break;
        }%>

    <a href="/Settings/AccountUserList" style="margin-left: 10px;" class="btn btn-primary ybtn-outline-dark user-dets"><%= Html.TranslateTag("Users") %>
        <%=Html.GetThemedSVG("recipients") %>
    </a>

    <script>
        $('#contactSave').hide();
    </script>

    <%}%>

    <input type="hidden" id="scroller" />
</div>


<script>

    function StringToNumber(string) {
        const matchingIndex = valuesArrayInStrings.indexOf(string);
        return valuesArrayInNumbers[matchingIndex]
    }

    $(document).ready(function () {
        var customerID;
        var groupID;
        var notificationType;
        var add;

        $('.notifyUser').click(function () {
            selectedName = $(this).attr('data-name');
            groupID = $(this).attr('data-groupid');
            var parentDiv = $('#delayValue_' + customerID).parent().parent();
            delayVal = Number(parentDiv.attr('data-delay'));

        })

            .mouseover(function () {
                $(this).css('cursor', 'pointer').css('background-color', '#2699fb59');
            })
            .mouseout(function () {
                $(this).css('cursor', 'pointer').css('background-color', '');
            });
    });
</script>

<style>
    .selected svg path {
        fill: #21CE99 !important;
    }

    #selectedUsers {
        height: 50px;
    }
</style>
