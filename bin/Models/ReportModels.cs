// Decompiled with JetBrains decompiler
// Type: Data.DatabaseStatisticsModel
// Assembly: iMonnit, Version=4.0.5.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D8B7007-62F0-412B-AC82-92244CE5EA6C
// Assembly location: C:\inetpub\wwwroot\Enterprise\bin\iMonnit.dll

using iMonnit.Models;
using RedefineImpossible;
using System;
using System.Collections.Generic;

#nullable disable
namespace Data;

internal class DatabaseStatisticsModel : BaseDBObject
{
  [DBMethod("MonnitUtil_CriticalCheck")]
  [DBMethodBody(DBMS.SqlServer, "\r\n\r\n--if dates aren't passed in, just default to past hour\r\nIF @StartDate IS NULL\r\n  SET @StartDate = DATEADD(MINUTE, -60, GETUTCDATE());\r\n\r\nIF @EndDate IS NULL\r\n  SET @EndDate =DATEADD(MINUTE, 60, @StartDate);\r\n\r\nDECLARE @AdjustedRatio DECIMAL(8,3)\r\n\r\nSET @AdjustedRatio =  CONVERT(DECIMAL(8,3), DATEDIFF(MINUTE, @StartDate, @EndDate)) / 60.0\r\n\r\nDECLARE @ResultsTable TABLE \r\n(\r\n  [TableName] VARCHAR(100), \r\n  [Type]      VARCHAR(100), \r\n  [Status]    VARCHAR(1000), \r\n  [Counts]    INT, \r\n  [Rank]      INT,\r\n  [MinThresh] DECIMAL(18,2),\r\n  [MaxThresh] DECIMAL(18,2)\r\n);\r\n\r\nDECLARE @NotiResults TABLE \r\n(\r\n  [NotificationRecordedID]  BIGINT, \r\n  [NotificationID]          BIGINT,\r\n  [Status]                  VARCHAR(1000), \r\n  [Delivered]               INT, \r\n  [eNotificationType]       INT, \r\n  [eNotificationClass]      INT\r\n);\r\n\r\nDECLARE @TempDM TABLE ([RowID] BIGINT IDENTITY(1,1), [Month] INT, [Day] INT, [HOUR] INT, [MINUTE] INT, [Counts] INT);\r\nDECLARE @TempGM TABLE ([RowID] BIGINT IDENTITY(1,1), [Month] INT, [Day] INT, [HOUR] INT, [MINUTE] INT, [Counts] INT);\r\n\r\nSELECT \r\n  [NotificationRecordedID]\r\nINTO #NotiRec\r\nFROM dbo.[NotificationRecorded] WITH (NOLOCK)\r\nWHERE [NotificationDate] BETWEEN @StartDate AND @EndDate ;\r\n\r\n\r\nINSERT INTO @TempDM ([Month], [Day], [Hour], [Minute], [Counts])\r\nSELECT\r\n  [Month]   = DATEPART(Month,   [MessageDate]),\r\n  [Day]     = DATEPART(Day,     [MessageDate]),\r\n  [Hour]    = DATEPART(HOUR,    [MessageDate]),\r\n  [Minute]  = DATEPART(MINUTE,  [MessageDate]),\r\n  [Counts]  = COUNT(*)\r\nFROM dbo.[DataMessage] WITH (NOLOCK)\r\nWHERE [MessageDate] BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(16), @StartDate,120)+ ':00.000') AND CONVERT(DATETIME, CONVERT(VARCHAR(16), @EndDate,120)+ ':59.000') --need the counts for the full minute and last 6 minutes will be artificially low\r\nGROUP BY \r\n  DATEPART(Month,   [MessageDate]),\r\n  DATEPART(Day,     [MessageDate]),\r\n  DATEPART(HOUR,    [MessageDate]),\r\n  DATEPART(MINUTE,  [MessageDate])\r\nORDER BY \r\n  DATEPART(Month,   [MessageDate]),\r\n  DATEPART(Day,     [MessageDate]),\r\n  DATEPART(HOUR,    [MessageDate]),\r\n  DATEPART(MINUTE,  [MessageDate]);\r\n\r\n\r\nINSERT INTO @TempGM (Month, [Day], [Hour], [Minute], [Counts])\r\nSELECT\r\nDATEPART(Month,     [ReceivedDate]),\r\n  [Day]    = DATEPART(Day,     [ReceivedDate]),\r\n  [Hour]   = DATEPART(HOUR,    [ReceivedDate]),\r\n  [Minute] = DATEPART(MINUTE,  [ReceivedDate]),\r\n  [Counts] = COUNT(*)\r\nFROM dbo.[GatewayMessage] with (NOLOCK)\r\nWHERE [ReceivedDate] BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(16), @StartDate,120)+ ':00.000') AND CONVERT(DATETIME, CONVERT(VARCHAR(16), @EndDate,120)+ ':59.000')\r\nGROUP BY\r\nDATEPART(Month,     [ReceivedDate]),\r\n  DATEPART(Day,     [ReceivedDate]),\r\n  DATEPART(HOUR,    [ReceivedDate]),\r\n  DATEPART(MINUTE,  [ReceivedDate])\r\nORDER BY \r\nDATEPART(Month,     [ReceivedDate]),\r\n  DATEPART(Day,     [ReceivedDate]),\r\n  DATEPART(HOUR,    [ReceivedDate]),\r\n  DATEPART(MINUTE,  [ReceivedDate])\r\n\r\nINSERT INTO @NotiResults\r\nSELECT\r\n  n.NotificationRecordedID,\r\n  n.notificationid,\r\n  n.Status,\r\n  n.Delivered,\r\n  n.eNotificationType,\r\n  n2.eNotificationClass\r\nFROM dbo.[NotificationRecorded] n WITH (NOLOCK)\r\nINNER JOIN #NotiRec nr ON nr.NotificationRecordedID = n.NotificationRecordedID\r\nINNER JOIN dbo.[Notification] n2  WITH (NOLOCK) ON n.NotificationID = n2.NotificationID\r\n\r\n\r\nINSERT INTO @ResultsTable ([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName] = 'ExternalDataSubscriptionAttempt',\r\n  [Type]      = 'WebHooks',\r\n  [Status]    = t.[Value] + ' - ' + CONVERT(VARCHAR(2) ,e.[Status]),\r\n  [Counts]    = COUNT(*), \r\n  [Rank]      = 1\r\nFROM dbo.[ExternalDataSubscriptionAttempt] e WITH (NOLOCK)\r\nINNER JOIN dbo.[TypeLookup] t ON t.[TableName] = 'ExternalDataSubscriptionAttempt' AND t.[ColumnName] = 'Status' AND t.[TypeID] = e.[Status]\r\nWHERE e.CreateDate BETWEEN @StartDate AND @EndDate\r\nGROUP BY t.[Value], e.[Status]\r\nORDER BY e.[Status]\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MinThresh], [MaxThresh])\r\nSELECT\r\n  [TableName]   = 'NotificationRecorded',\r\n  [Type]        = 'Email/Text/Phone',\r\n  [Status]      = 'Total (e/t/p)',\r\n  [Counts]      = COUNT(*),\r\n  [Rank]        = 2,\r\n  [MinThresh]   = 800 * @AdjustedRatio,\r\n  [MaxThresh]   = 5000  * @AdjustedRatio\r\nFROM @NotiResults n \r\nWHERE n.[eNotificationType] in (1,2,3,6)\r\nORDER BY Count(*) DESC\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName]   = 'NotificationRecorded',\r\n  [Type]        = 'Email/Text/Phone',\r\n  [Status]      = 'Delivered - ' + n.[Status],\r\n  [Counts]      = COUNT(*),\r\n  [Rank]        = 3\r\nFROM @NotiResults n \r\nWHERE n.[Delivered] = 1\r\n  AND n.[eNotificationType] in (1,2,3,6)\r\nGROUP BY n.[Status]\r\nORDER BY Count(*) DESC\r\n\r\nUPDATE @ResultsTable SET [MinThresh] = 1000 * @AdjustedRatio WHERE Rank = 3 and Status = 'Delivered - Delivered'\r\n\r\nUPDATE @ResultsTable SET [MaxThresh] = 200 * @AdjustedRatio WHERE Rank = 3 and Status = 'Delivered - Email Sent'\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName]   = 'NotificationRecorded',\r\n  [Type]        = 'Email/Text/Phone',\r\n  [Status]      = 'Not Delivered - completed: +(phone)',\r\n  [Counts]      = COUNT(*),\r\n  [Rank]        = 4\r\nFROM @NotiResults n\r\nWHERE n.[Delivered] = 0\r\n  AND n.[eNotificationType] IN (1,2,3,6)\r\n  AND n.[Status] LIKE '%completed: +%'\r\nORDER BY COUNT(*) DESC\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Email/Text/Phone',\r\n  [Status]    = 'Not Delivered - ' + n.[Status],\r\n  [Counts]    = COUNT(*),\r\n  [Rank]      = 4\r\nFROM @NotiResults n\r\nWHERE n.[Delivered] = 0\r\n  AND n.[eNotificationType] IN (1,2,3,6)\r\n  AND n.[Status] NOT LIKE '%Opted Out%'\r\n  AND n.[Status] NOT LIKE '%Email Failed%'\r\n  AND n.[Status] NOT LIKE '%completed: +%'\r\nGROUP BY n.[Status]\r\nORDER BY Count(*) DESC\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Email/Text/Phone',\r\n  [Status]    = 'Not Delivered - Email Failed',\r\n  [Counts]    = COUNT(*),\r\n  [Rank]      = 5\r\nFROM @NotiResults n \r\nWHERE n.[Delivered] = 0\r\n  AND n.[eNotificationType] in (1,2,3,6)\r\n  AND n.[Status] NOT LIKE '%Opted Out%'\r\n  AND n.[Status] LIKE '%Email Failed%'\r\nORDER BY COUNT(*) DESC\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName]   = 'NotificationRecorded',\r\n  [Type]        = 'Email/Text/Phone',\r\n  [Status]      = 'Not Delivered - Opted Out',\r\n  [Counts]      = COUNT(*),\r\n  [Rank]        = 6\r\nFROM @NotiResults n \r\nWHERE n.[Delivered] = 0\r\n  AND n.[eNotificationType] in (1,2,3,6)\r\n  AND n.[Status] LIKE '%Opted Out%'\r\nORDER BY COUNT(*) DESC\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MaxThresh])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Email/Text/Phone',\r\n  [Status]    = '(Undelivered - Opted Out) / (Total - Opted Out) (%):',\r\n  [Counts]    = CEILING(100 * (CONVERT(DECIMAL(18,4) ,(SELECT COUNT(*) FROM @NotiResults WHERE [Delivered] = 0 AND [eNotificationType] IN (1,2,3,6)  AND Status NOT LIKE '%Opted%' )) / CONVERT(DECIMAL(18,4), (SELECT COUNT(*)+1 FROM @NotiResults WHERE eNotificationType IN (1,2,3,6)  AND Status NOT LIKE '%Opted%' ) ))),\r\n  [Rank]      = 7,\r\n  [MaxThres]  = 30 \r\n\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MaxThresh])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Email/Text/Phone',\r\n  [Status]    = 'InActivity Notifications - Unique Notifications',\r\n  [Counts]    = COUNT(*),\r\n  [Rank]      = 8,\r\n  [MaxThresh] = 180 \r\nFROM (SELECT DISTINCT NotificationID from @NotiResults n \r\nWHERE n.[eNotificationType] in (1,2,3,6)\r\n  AND n.[eNotificationClass] = 2 ) t\r\nORDER BY COUNT(*) DESC\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Control/LocalNotifier',\r\n  [Status]    = 'Totals',\r\n  [Counts]    = COUNT(*),\r\n  [Rank]      = 9\r\nFROM @NotiResults n \r\nWHERE n.eNotificationType in (4,5,10)\r\nORDER BY COUNT(*) DESC\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT\r\n  [TableName] = 'NotificationRecorded',\r\n  [Type]      = 'Control/LocalNotifier',\r\n  [Status]    = n.[Status],\r\n  [Counts]    = COUNT(*),\r\n  [Rank]      = 9\r\nFROM @NotiResults n \r\nWHERE n.[eNotificationType] in (4,5,10)\r\nGROUP BY n.[Status]\r\nORDER BY COUNT(*) desc\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT TOP 1\r\n  [TableName]   = 'DataMessage',\r\n  [Type]        = 'Max Inserts Per Minute',\r\n  [Status]      = 'day: ' + CONVERT(VARCHAR(8), d.[Day]) + ' Time: ' + CONVERT(VARCHAR(8),d.[Hour]) + ':' + CONVERT(VARCHAR(8),d.[Minute]),\r\n  [Counts]      = t.[Counts],\r\n  [rank]        = 12\r\nFROM @TempDM d\r\nINNER JOIN (\r\n              SELECT\r\n                [Counts] = Max([Counts])\r\n              FROM @TempDM\r\n) t on d.[Counts] = t.[Counts]\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MaxThresh], [MinThresh])\r\nSELECT\r\n  [TableName] = 'DataMessage',\r\n  [Type]      = 'Totals',\r\n  [Status]    = 'Total Counts',\r\n  [Counts]    = t.[Counts],\r\n  [rank]      = 11,\r\n  [MaxThresh]   = 250000 * @AdjustedRatio,\r\n  [MinThresh]   = 150000 * @AdjustedRatio\r\nFROM (\r\n        SELECT\r\n          [Counts] = SUM([Counts])\r\n        FROM @TempDM\r\n      ) t \r\n\r\nIF DATEDIFF(minute, @EndDate, GETUTCDATE()) < 6\r\nBEGIN\r\n\r\n    DELETE t\r\n    FROM @TempDM t\r\n    INNER JOIN (SELECT top 6 RowID From @TempDM ORDER BY RowID Desc) t2 on t.RowID = t2.RowID\r\n\r\nEND\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MinThresh])\r\nSELECT TOP 1\r\n  [TableName]   = 'DataMessage',\r\n  [Type]        = 'Min Inserts per Minute',\r\n  [Status]      = 'day: ' + CONVERT(VARCHAR(8), d.[Day]) + ' Time: ' + CONVERT(VARCHAR(8),d.[Hour]) + ':' + CONVERT(VARCHAR(8),d.[Minute]),\r\n  [Counts]      = t.[Counts],\r\n  [Rank]        = 12,\r\n  [MinThresh]   = 700\r\nFROM @TempDM d\r\nINNER JOIN (\r\n              SELECT\r\n                [Counts] = MIN(Counts)\r\n              FROM @TempDM t\r\n) t ON d.[Counts] = t.[Counts]\r\n\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank])\r\nSELECT TOP 1\r\n  [TableName] = 'GatewaMessage',\r\n  [Type]      = 'Max Inserts Per Minute',\r\n  [Status]    = 'day: ' + CONVERT(VARCHAR(8), d.[Day]) + ' Time: ' + CONVERT(VARCHAR(8),d.[Hour]) + ':' + CONVERT(VARCHAR(8),d.[Minute]),\r\n  [Counts]    = t.[Counts],\r\n  [rank]      = 14\r\nFROM @TempGM d\r\nINNER JOIN (\r\n              SELECT\r\n                [Counts] = MAX([Counts])\r\n              FROM @TempGM\r\n           ) t ON d.[Counts] = t.[Counts]\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MaxThresh], [MinThresh])\r\nSELECT\r\n  [TableName] = 'GatewayMessage',\r\n  [Type]      = 'Totals',\r\n  [Status]    = 'Total Counts',\r\n  [Counts]    = t.[Counts],\r\n  [rank]      = 13,\r\n  [MaxThresh]   = 220000 * @AdjustedRatio,\r\n  [MinThresh]   = 120000 * @AdjustedRatio\r\nFROM (\r\n        SELECT\r\n          [Counts] = SUM([Counts])\r\n        FROM @TempGM\r\n      ) t \r\n      \r\n\r\nIF DATEDIFF(minute, @EndDate, GETUTCDATE()) < 6\r\nBEGIN\r\n\r\n    DELETE t\r\n    FROM @TempGM t\r\n    INNER JOIN (SELECT top 6 RowID From @TempGM ORDER BY RowID Desc) t2 on t.RowID = t2.RowID\r\n\r\nEND\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MinThresh])\r\nSELECT TOP 1\r\n  [TableName] = 'GatewayMessage',\r\n  [Type]      = 'Min Inserts per Minute',\r\n  [Status]    = 'day: ' +  CONVERT(VARCHAR(8), d.[Day]) + ' Time: ' + CONVERT(VARCHAR(8),d.[Hour]) + ':' + CONVERT(VARCHAR(8),d.[Minute]),\r\n  [Counts]    = t.[Counts],\r\n  [Rank]      = 14,\r\n  [MinThresh] = 500\r\nFROM @TempGM d\r\nINNER JOIN (\r\n              SELECT\r\n                [Counts] = MIN([Counts])\r\n              FROM @TempGM\r\n           ) t ON d.[Counts] = t.[Counts]\r\n\r\nINSERT INTO @ResultsTable([TableName], [Type], [Status], [Counts], [Rank], [MaxThresh])\r\nSELECT \r\n  [TableName] = 'ExceptionLog',\r\n  [Type]      = 'Exception Messages',\r\n  [Status]    = SUBSTRING(message, 0, 21), \r\n  [Counts]    = count(*),\r\n  [Rank]      = 10,\r\n  [MaxThresh] = 500 * @AdjustedRatio\r\nFROM dbo.[ExceptionLog] WITH (NOLOCK)\r\nWHERE [ExceptionDate] between DATEADD(HOUR, -6, @StartDate) and DATEADD(HOUR, -6, @EndDate)\r\nand [Message] not like '%inbound%'\r\nand [Message] not like '%weather%'\r\nGROUP BY \r\nSUBSTRING([Message], 0, 21)\r\n\r\nUPDATE @ResultsTable set MaxThresh = 1000 * @AdjustedRatio WHERE Rank = 10 and Status like '%NT Authority%'\r\n\r\nUPDATE @ResultsTable set MinThresh = 25000 * @AdjustedRatio WHERE Rank = 1 and Status like '%Success - 0%'\r\n\r\n\r\nUPDATE @ResultsTable set MaxThresh = 2000  * @AdjustedRatio WHERE Rank = 1 and Status like '%Failure - 1%'\r\n\r\nUPDATE @ResultsTable set MaxThresh = 5000 * @AdjustedRatio WHERE Rank = 1 and Status like '%InProcess - 2%'\r\n\r\nIF @RunDetails = 1\r\nBEGIN\r\n\r\nSELECT \r\n* \r\nFROM @ResultsTable\r\norder by Rank, Counts desc\r\n\r\nEND ELSE\r\nBEGIN\r\n\r\n    DECLARE @StringBuilder VARCHAR(8000) = ''\r\n    DECLARE @Send BIT = 0\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 1 and [Status] like '%Success%') < 25000 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = '///Webhook Success Low: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 1 and [Status] like '%Success%') + '///'\r\n\r\n    END\r\n\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 1 and [Status] like '%Fail%') > 2000 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// Webhook Failure High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 1 and [Status] like '%Fail%') + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 1 and [Status] like '%Process%') > 5000 *@AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// Webhook In Process High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 1 and [Status] like '%Process%') + '///'\r\n\r\n    END\r\n\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 2) > 5000 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// NotificationRecorded Counts High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 2) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 2) < 800 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// NotificationRecorded Counts Low: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 2) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 3 and Status = 'Delivered - Delivered') < 1000 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// NotificationRecorded E/T/P Delivered Low: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 3 and Status = 'Delivered - Delivered') + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 3 and Status = 'Delivered - Email Sent') > 200 \r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '/// NotificationRecorded ETP Pending Response High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 3 and Status = 'Delivered - Email Sent') + '///'\r\n\r\n    END\r\n\r\n    --decision just to use the undelivered percentage threshold (see below)\r\n    --IF (SELECT counts from @ResultsTable WHERE [Rank] = 5) > 20 \r\n    --BEGIN\r\n\r\n    --  SET @StringBuilder = @StringBuilder + '/// Email Failures High (Check SparkPost): ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 5) + '///'\r\n\r\n    --END\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 7) > 30\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '///Undelivered Percent (sans Opted Out) High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 7) + '///'\r\n\r\n    END\r\n\r\n\r\n    IF (SELECT counts from @ResultsTable WHERE [Rank] = 8) > 180 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//InActivity Notifications - Unique Notifications High: ' + (SELECT CONVERT(VARCHAR(10), counts) FROM @ResultsTable WHERE [Rank] = 8) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 10 AND Status NOT LIKE '%NT Authority%') > 500 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//Check Exception Log for High occurring exception: ' + (SELECT CONVERT(VARCHAR(10), max(counts)) from @ResultsTable WHERE [Rank] = 10 \r\n                                                                                                             AND Status NOT LIKE '%NT Authority%') + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 10 AND Status LIKE '%NT Authority%') > 1000 * @AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//NT Authority Exception High: ' + (SELECT CONVERT(VARCHAR(10), max(counts)) from @ResultsTable WHERE [Rank] = 10 \r\n                                                                                                             AND Status LIKE '%NT Authority%') + '///'\r\n\r\n    END\r\n\r\n\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 11) > 250000 *@AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//DataMessage Inserts High: ' + (SELECT CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 11) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 11) < 150000 *@AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//DataMessage Inserts Low: ' + (SELECT CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 11) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 12 and status like '%min%') < 700\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//DataMessage ' + (SELECT status + ': ' + CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 12 and type like '%min%') + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 13) > 220000 *@AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//GatewayMessage Inserts High: ' + (SELECT CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 13) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 13) < 120000 *@AdjustedRatio\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//GatewayMessage Inserts Low: ' + (SELECT CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 13) + '///'\r\n\r\n    END\r\n\r\n    IF (SELECT max(counts) from @ResultsTable WHERE [Rank] = 14 and status like '%min%') < 500\r\n    BEGIN\r\n\r\n      SET @StringBuilder = @StringBuilder + '//GatewayMessage ' + (SELECT status + ': ' + CONVERT(VARCHAR(10), counts) from @ResultsTable WHERE [Rank] = 14 and type like '%min%') + '///'\r\n\r\n    END\r\n\r\n    IF @StringBuilder != ''\r\n    BEGIN\r\n      \r\n      SET @Send = 1\r\n\r\n    END ELSE\r\n    BEGIN\r\n\r\n      SET @StringBuilder = 'No issues.'\r\n\r\n    END\r\n\r\n    SELECT RV = @Send, Message = @StringBuilder\r\nEND\r\n\r\ndrop table #notirec\r\n")]
  internal class CriticalCheck : BaseDBMethod
  {
    [DBMethodParam("RunDetails", typeof (bool))]
    public bool RunDetails { get; private set; }

    [DBMethodParam("StartDate", typeof (DateTime))]
    public DateTime StartDate { get; private set; }

    [DBMethodParam("EndDate", typeof (DateTime))]
    public DateTime EndDate { get; private set; }

    public List<DatabaseStatistics> Result { get; private set; }

    public CriticalCheck(bool runDetails, DateTime startDate, DateTime endDate)
    {
      this.RunDetails = runDetails;
      this.StartDate = startDate;
      this.EndDate = endDate;
      this.Result = BaseDBObject.Load<DatabaseStatistics>(this.ToDataTable());
    }
  }
}
