// Decompiled with JetBrains decompiler
// Type: details.CriticalDetailsModel
// Assembly: iMonnit, Version=4.0.5.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D8B7007-62F0-412B-AC82-92244CE5EA6C
// Assembly location: C:\inetpub\wwwroot\Enterprise\bin\iMonnit.dll

using iMonnit.Models;
using RedefineImpossible;
using System;
using System.Collections.Generic;

#nullable disable
namespace details;

internal class CriticalDetailsModel : BaseDBObject
{
  [DBMethod("MonnitUtil_CriticalDetails")]
  [DBMethodBody(DBMS.SqlServer, "\r\n--SET @TableName  = 'ExternalDataSubscriptionAttempt'\r\n--SET @Status     = 'Failure - 1'\r\n--SET @FromDate   = DATEADD(HOUR, -1, GETUTCDATE())\r\n--SET @ToDate     = GETUTCDATE()\r\n\r\nIF @TableName = 'ExternalDataSubscriptionAttempt' AND @Status = 'Failure - 1'\r\nBEGIN\r\n\r\n  SELECT\r\n    AccountNumber = ISNULL(a3.AccountNumber, a4.accountnumber),\r\n    a.ExternalDataSubscriptionID, \r\n    r.status , \r\n    Counts         = COUNT(*),\r\n    Gatewayid      = NULL,\r\n    Reportinterval = NULL,\r\n    Notificationid = NULL,\r\n    Smtp           = NULL,\r\n    Message        = NULL,\r\n    Stacktrace     = NULL,\r\n    Exceptiondate  = NULL\r\n  FROM dbo.[ExternalDataSubscriptionAttempt] a       WITH (NOLOCK)\r\n  LEFT JOIN dbo.[ExternalDataSubscriptionResponse] r WITH (NOLOCK) ON a.ExternalDataSubscriptionAttemptID = r.ExternalDataSubscriptionAttemptID\r\n  LEFT JOIN dbo.[Account] a2                         WITH (NOLOCK) ON a.ExternalDataSubscriptionID = a2.ExternalDataSubscriptionID\r\n  LEFT JOIN dbo.[Account] a3                         WITH (NOLOCK) ON a3.AccountID = SUBSTRING(REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0, CHARINDEX('*',REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0))\r\n  LEFT JOIN dbo.[ExternalDataSubscription] e         WITH (NOLOCK) ON a.ExternalDataSubscriptionID = e.ExternalDataSubscriptionID\r\n  LEFT JOIN dbo.[Account] a4                         WITH (NOLOCK) ON e.accountid = a4.AccountID\r\n  WHERE a.CreateDate BETWEEN @FromDate AND @ToDate\r\n    AND a.Status = 1\r\n  GROUP BY ISNULL(a3.AccountNumber, a4.AccountNumber), a.ExternalDataSubscriptionID, a.url, a.Status, r.StatusCode, r.Status\r\n  ORDER BY COUNT(*) desc\r\n\r\nEND ELSE\r\n\r\nIF @TableName = 'GatewayMessage' AND @Status = 'Total Counts'\r\nBEGIN\r\n\r\n  SELECT \r\n    g.GatewayID, \r\n    a.AccountNumber, \r\n    g2.ReportInterval\r\n  INTO #temp1\r\n  FROM dbo.GatewayMessage g WITH (NOLOCK)\r\n  INNER JOIN dbo.Gateway g2 WITH (NOLOCK) ON g.gatewayid= g2.gatewayid\r\n  LEFT JOIN  dbo.Csnet c    WITH (NOLOCK) ON g2.CSNetID = c.csnetid\r\n  LEFT JOIN  dbo.Account a  WITH (NOLOCK) ON c.accountid = a.accountid\r\n  WHERE g.ReceivedDate BETWEEN @FromDate and @ToDate\r\n\r\n\r\n  SELECT TOP 6\r\n    Accountnumber, \r\n    Gatewayid, \r\n    ReportInterval, \r\n    Counts = count(*),\r\n    ExternalDataSubscriptionID = NULL, \r\n    Status                     = NULL, \r\n    Notificationid             = NULL,\r\n    Smtp                       = NULL,\r\n    Message                    = NULL,\r\n    Stacktrace                 = NULL,\r\n    Exceptiondate              = NULL\r\n  FROM #temp1 \r\n  GROUP BY \r\n    Gatewayid, \r\n    ReportInterval, \r\n    AccountNumber\r\n  ORDER BY \r\n    COUNT(*) DESC\r\n\r\n  drop table #temp1\r\n\r\n\r\nEND ELSE\r\nIF @TableName = 'NotificationRecorded' AND @Status = 'Delivered - Email Sent'\r\nBEGIN\r\n\r\n    SELECT\r\n      AccountNumber =  ISNULL(a3.AccountNumber, a2.AccountNumber), \r\n      n.NotificationID, \r\n      a.SMTP, \r\n      Counts                      = COUNT(*),\r\n      GatewayID                   = NULL, \r\n      ReportInterval              = NULL,\r\n      ExternalDataSubscriptionID  = NULL, \r\n      Status                      = NULL, \r\n      Message                     = NULL,\r\n      Stacktrace                  = NULL,\r\n      Exceptiondate               = NULL\r\n    FROM dbo.[NotificationRecorded] r WITH (NOLOCK)\r\n    INNER JOIN dbo.[Notification] n WITH (NOLOCK) ON r.NotificationID = n.NotificationID\r\n    LEFT JOIN dbo.[Account] a2 WITH (NOLOCK) ON a2.AccountID = n.AccountID\r\n    LEFT JOIN dbo.[Account] a3 WITH (NOLOCK) ON a3.AccountID = SUBSTRING(REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0, CHARINDEX('*',REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0))\r\n    LEFT JOIN dbo.[AccountTheme] a WITH (NOLOCK) ON a3.AccountID = a.AccountID AND a.IsActive = 1\r\n    WHERE r.notificationdate BETWEEN @FromDate AND @ToDate\r\n      AND r.eNotificationType in (1, 2, 6)\r\n      AND r.Status LIKE '%sent%'\r\n    GROUP BY n.NotificationID,  ISNULL(a3.AccountNumber, a2.AccountNumber),  a.SMTP\r\n    ORDER BY COUNT(*) DESC\r\n\r\nEND ELSE\r\nIF @TableName = 'NotificationRecorded' AND @Status = 'Not Delivered - Email Failed'\r\nBEGIN\r\n\r\n  SELECT\r\n    AccountNumber = ISNULL(a3.AccountNumber, a2.AccountNumber), \r\n    n.NotificationID, \r\n    a.SMTP, \r\n    Counts                      = COUNT(*),\r\n    GatewayID                   = NULL, \r\n    ReportInterval              = NULL,\r\n    ExternalDataSubscriptionID  = NULL, \r\n    Status                      = NULL, \r\n    Message                     = NULL,\r\n    Stacktrace                  = NULL,\r\n    Exceptiondate               = NULL\r\n  FROM dbo.[NotificationRecorded] r WITH (NOLOCK)\r\n  INNER JOIN dbo.[Notification] n   WITH (NOLOCK) ON r.NotificationID = n.NotificationID\r\n  LEFT JOIN dbo.[Account] a2        WITH (NOLOCK) ON a2.AccountID = n.AccountID\r\n  LEFT JOIN dbo.[Account] a3        WITH (NOLOCK) ON a3.AccountID = SUBSTRING(REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0, CHARINDEX('*',REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0))\r\n  LEFT JOIN dbo.AccountTheme a      WITH (NOLOCK) ON a3.AccountID = a.AccountID AND a.IsActive = 1\r\n  WHERE r.NotificationDate BETWEEN @FromDate AND @ToDate\r\n    AND r.eNotificationType IN (1, 2, 6)\r\n    AND r.Status LIKE '%fail%'\r\n    AND r.Status NOT LIKE '%opted%'\r\n  GROUP BY ISNULL(a3.AccountNumber, a2.AccountNumber),  a.SMTP,  n.NotificationID,  a2.AccountNumber, n.Name\r\n  ORDER BY COUNT(*) DESC\r\n\r\nEND ELSE\r\nIF @TableName = 'NotificationRecorded' AND @Status = 'InActivity Notifications - Unique Notifications'\r\nBEGIN\r\n\r\n  SELECT \r\n    NotificationRecordedID, \r\n    NotificationID, \r\n    NotificationTriggeredID\r\n  INTO #NotiTest\r\n  FROM dbo.[NotificationRecorded] \r\n  WHERE NotificationDate BETWEEN DATEADD(HOUR, -1, GETUTCDATE()) AND GETUTCDATE()\r\n\r\n\r\n  SELECT \r\n    Message, \r\n    Accountnumber, \r\n    Counts = COUNT(*) \r\n  FROM (\r\n        SELECT DISTINCT\r\n           Message = a3.AccountNumber , \r\n           a2.AccountNumber, \r\n           n.NotificationID\r\n        FROM dbo.[Notification] n                 WITH (NOLOCK)\r\n        INNER JOIN #NotiTest n2 ON n.NotificationID = n2.NotificationID\r\n        INNER JOIN dbo.[NotificationTriggered] nt WITH (NOLOCK) ON n.NotificationID = nt.NotificationID AND n2.NotificationTriggeredID = nt.NotificationTriggeredID\r\n        INNER JOIN dbo.[Account] a2               WITH (NOLOCK) ON n.AccountID = a2.AccountID\r\n        LEFT JOIN dbo.[Account] a3                WITH (NOLOCK)  ON a3.AccountID = SUBSTRING(REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0, CHARINDEX('*',REPLACE(REPLACE(a2.AccountIDTree, '*1*16836', ''), '*16737*', ''), 0))\r\n        WHERE n.eNotificationClass = 2 ) t\r\n  GROUP BY Message, Accountnumber\r\n  ORDER BY Message\r\n\r\n\r\nEND ELSE\r\nIF @TableName = 'ExceptionLog'\r\nBEGIN\r\n\r\n  SET @FromDate = (SELECT dbo.GetLocalTime(@FromDate, 'Mountain Standard Time'))\r\n  SET @ToDate   = (SELECT dbo.GetLocalTime(@ToDate,   'Mountain Standard Time'))\r\n\r\n\r\n  SELECT TOP 1 \r\n    Message, \r\n    StackTrace, \r\n    ExceptionDate ,\r\n    Counts                     = NULL,\r\n    AccountNumber              = NULL, \r\n    notificationid             = NULL, \r\n    SMTP                       = NULL, \r\n    GatewayID                  = NULL, \r\n    ReportInterval             = NULL,\r\n    ExternalDataSubscriptionID = NULL, \r\n    Status                     = NULL\r\n  FROM dbo.ExceptionLog WITH (NOLOCK)\r\n  WHERE Message like '%'+@Status+'%'\r\n    AND ExceptionDate BETWEEN @FromDate and @ToDate\r\n  ORDER BY ExceptionDate DESC\r\n\r\nEND\r\n")]
  internal class CriticalDetails : BaseDBMethod
  {
    [DBMethodParam("TableName", typeof (string))]
    public string TableName { get; private set; }

    [DBMethodParam("Status", typeof (string))]
    public string Status { get; private set; }

    [DBMethodParam("FromDate", typeof (DateTime))]
    public DateTime FromDate { get; private set; }

    [DBMethodParam("ToDate", typeof (DateTime))]
    public DateTime ToDate { get; private set; }

    public List<DatabaseDetails> Result { get; private set; }

    public CriticalDetails(string tableName, string status, DateTime fromDate, DateTime toDate)
    {
      this.TableName = tableName;
      this.Status = status;
      this.FromDate = fromDate;
      this.ToDate = toDate;
      this.Result = BaseDBObject.Load<DatabaseDetails>(this.ToDataTable());
    }
  }
}
