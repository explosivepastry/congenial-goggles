// Decompiled with JetBrains decompiler
// Type: Monnit.Data.InactivityNotification
// Assembly: Business, Version=2.5.0.6, Culture=neutral, PublicKeyToken=null
// MVID: ADEA1334-3F26-4050-9B0F-973EB7B9AD1C
// Assembly location: C:\inetpub\wwwroot\Enterprise\bin\Business.dll

using RedefineImpossible;
using System.Collections.Generic;

#nullable disable
namespace Monnit.Data;

public class InactivityNotification
{
  [DBMethod("Notification_LoadNonActivity")]
  [DBMethodBody(DBMS.SQLite, "\r\n-- ---------Declare Variables Used------------\r\n\t-- Aggregate table for when we add Gateway notifications into Express\r\n\r\n  CREATE TEMP TABLE T_Notify (\r\n\t\tNotificationID BIGINT\r\n\t\t,SensorID BIGINT\r\n\t\t,eNotificationType INT\r\n\t\t,CustomerToNotifyID BIGINT\r\n\t\t,NotificationText VARCHAR\r\n\t\t,eCompareType INT\r\n\t\t,Version VARCHAR\r\n\t\t,CompareValue VARCHAR\r\n\t\t,SnoozeDuration INT\r\n\t\t,LastSent DATETIME\r\n\t\t,Name VARCHAR        \r\n\t\t,StartTime DATETIME        \r\n\t\t,EndTime DATETIME\r\n\t\t,IsDeleted BIT\r\n\t\t,IsActive BIT\r\n\t\t,AdvancedNotificationID BIGINT\r\n\t\t,eNotificationClass INT\r\n\t\t,ApplicationID BIGINT\r\n\t\t,GatewayID BIGINT\r\n\t\t,AccountID BIGINT\r\n\t\t,Scale VARCHAR\r\n        ,ApplySnoozeByTriggerDevice BIT\r\n        ,AlwaysSend BIT\r\n        ,MondayScheduleID BIGINT\r\n        ,TuesdayScheduleID BIGINT\r\n        ,WednesdayScheduleID BIGINT\r\n        ,ThursdayScheduleID BIGINT\r\n        ,FridayScheduleID BIGINT\r\n        ,SaturdayScheduleID BIGINT\r\n        ,SundayScheduleID BIGINT\r\n        ,Subject VARCHAR\r\n\t);\r\n\t\t\t\r\n\t-- ---------Select Non Active Sensors------------\r\n\tINSERT INTO T_Notify \r\n\tSELECT n.NotificationID --NotificationID\r\n\t\t,s.SensorID --SensorID\r\n\t\t,NULL --NotificationType(Email)\r\n\t\t,NULL --CustomerToNotifyID\r\n\t\t,'This Sensor has not checked in for ' || n.CompareValue || ' minutes' --NotificationText\r\n\t\t,n.eCompareType\r\n\t\t,n.Version \r\n\t\t,n.CompareValue --CompareValue \r\n\t\t,n.SnoozeDuration --SnoozeDuration (Already Calculated)\r\n\t\t,n.LastSent --LastSent\r\n\t\t,n.Name         \r\n\t\t,n.StartTime         \r\n\t\t,n.EndTime \r\n\t\t,n.IsDeleted \r\n\t\t,n.IsActive \r\n\t\t,n.AdvancedNotificationID \r\n\t\t,n.eNotificationClass\r\n\t\t,n.ApplicationID -- ApplicationID\r\n\t\t,null -- GatewayID\r\n\t\t,null -- AccountID\r\n\t\t,null -- Scale ie(C, F)\r\n        ,n.ApplySnoozeByTriggerDevice\r\n        ,n.AlwaysSend\r\n        ,n.MondayScheduleID BIGINT\r\n        ,n.TuesdayScheduleID BIGINT\r\n        ,n.WednesdayScheduleID BIGINT\r\n        ,n.ThursdayScheduleID BIGINT\r\n        ,n.FridayScheduleID BIGINT\r\n        ,n.SaturdayScheduleID BIGINT\r\n        ,n.SundayScheduleID BIGINT\r\n        ,n.Subject\r\n\tFROM Notification n\r\n\tINNER JOIN SensorNotification sn on sn.NotificationID = n.NotificationID\r\n\tINNER JOIN Sensor s on sn.SensorID = s.SensorID\r\n\tWHERE ((n.eNotificationClass = 1 AND (n.ApplicationID = 14 OR n.ApplicationID = 17 OR n.ApplicationID = 45 OR n.ApplicationID = 66))--Application Notification --ActiveID\r\n\t\tOR n.eNotificationClass = 2)--Inactivity Notification (Sensor)\r\n\tAND DATETIME(s.LastCommunicationDate, '+' || n.[CompareValue] || ' minute') < DATETIME('now') -- Too long since last check in\r\n\tAND (n.[LastSent] is null -- Snooze is NOT in affect\r\n\t\tOR DATETIME(n.[LastSent], '+' || n.[SnoozeDuration] || ' minute') <= DATETIME('now'))  -- Snooze is NOT in affect\r\n\r\n\tAND (s.IsActive = 1 OR s.IsActive is null)\r\n\tAND s.IsSleeping = 0 -- don't notify if sleeping\r\n\tAND (n.IsActive = 1 OR n.IsActive is null) -- Only send notification for 'active' notifications\r\n\tAND (n.IsDeleted = 0 OR n.IsDeleted is null);-- Only send notification for notifications that have not been deleted\r\n\r\n\r\n\t\r\nSELECT * FROM T_Notify;\r\n\r\nDROP TABLE T_Notify;\r\n ")]
  [DBMethodBody(DBMS.SqlServer, "\r\n    DECLARE @ProcName NVARCHAR(50);\r\n    DECLARE @ErrorNum       INT,\r\n            @ErrorProcedure NVARCHAR(50),\r\n            @ErrorSysMsg    NVARCHAR(MAX);\r\n\r\n    -----------Declare Variables Used------------\r\n    DECLARE @Notify TABLE\r\n      (\r\n         NotificationID             BIGINT,\r\n         SensorID                   BIGINT,\r\n         GatewayID                  BIGINT,\r\n         NotificationText           NVARCHAR(MAX),\r\n         eCompareType               INT,\r\n         [Version]                  VARCHAR(255),\r\n         CompareValue               VARCHAR(255),\r\n         SnoozeDuration             INT,\r\n         ApplySnoozeByTriggerDevice BIT,\r\n         LastSent                   DATETIME,\r\n         [Name]                     VARCHAR(255),\r\n         IsDeleted                  BIT,\r\n         IsActive                   BIT,\r\n         StartTime                  DATETIME,\r\n         EndTime                    DATETIME,\r\n         AdvancedNotificationID     BIGINT,\r\n         AccountID                  BIGINT,\r\n         eNotificationClass         INT,\r\n         ApplicationID              BIGINT,\r\n         Scale                      VARCHAR(255),\r\n         AlwaysSend                 BIT,\r\n         MondayScheduleID           BIGINT,\r\n         TuesdayScheduleID          BIGINT,\r\n         WednesdayScheduleID        BIGINT,\r\n         ThursdayScheduleID         BIGINT,\r\n         FridayScheduleID           BIGINT,\r\n         SaturdayScheduleID         BIGINT,\r\n         SundayScheduleID           BIGINT,\r\n         [Subject]                  NVARCHAR(255),\r\n         DatumIndex                 INT,\r\n         ScaleID                    INT,\r\n         eDatumType                 INT,\r\n         SMSText                    NVARCHAR(255),\r\n         VoiceText                  NVARCHAR(2000),\r\n         InactiveSensorID           BIGINT,\r\n         InactiveGatewayID          BIGINT,\r\n         SensorNotificationID       BIGINT,\r\n         GatewayNotificationID      BIGINT,\r\n         CanAutoAcknowledge         BIT,\r\n         NotificationByTimeID       BIGINT,\r\n         HasUserNotificationAction  BIT,\r\n         HasControlAction           BIT,\r\n         HasLocalAlertAction        BIT,\r\n         HasSystemAction            BIT,\r\n\t\t HasResetAccAction          BIT,\r\n         HasThermostatAction        BIT,\r\n         NotificationTriggeredID    BIGINT,\r\n         LocalAlertText             VARCHAR(255),\r\n         PushMsgText                NVARCHAR(2000),\r\n         IgnoreMaintenanceWindow    BIT\r\n      );\r\n\r\n    BEGIN TRY\r\n        SET @ProcName = Object_name(@@PROCID);\r\n\r\n        -----------Select Non Active Gateways------------\r\n        WITH CTE_Results\r\n             AS (SELECT DISTINCT n.NotificationID,\r\n                                 SensorID2               = NULL,\r\n                                 GatewayID               = NULL,\r\n                                 n.NotificationText,\r\n                                 n.eCompareType,\r\n                                 n.[Version],\r\n                                 n.CompareValue,\r\n                                 n.SnoozeDuration,\r\n                                 n.ApplySnoozeByTriggerDevice,\r\n                                 LastSent                = CASE\r\n                                              WHEN n.ApplySnoozeByTriggerDevice = 1 THEN (SELECT COALESCE(Max(rec.NotificationDate), '1/1/1900')\r\n                                                                                          FROM   NotificationRecorded rec\r\n                                                                                          WHERE  rec.NotificationID = n.NotificationID\r\n                                                                                                 AND rec.GatewayID = g.GatewayID)\r\n                                              ELSE n.LastSent\r\n                                            END,\r\n                                 n.[Name],\r\n                                 n.IsDeleted,\r\n                                 n.IsActive,\r\n                                 StartTime               = Isnull(n.StartTime, '1900-01-01'),\r\n                                 EndTime                 = Isnull(n.EndTime, '1900-01-01'),\r\n                                 n.AdvancedNotificationID,\r\n                                 n.AccountID,\r\n                                 n.eNotificationClass,\r\n                                 n.ApplicationID,\r\n                                 n.Scale,\r\n                                 n.AlwaysSend,\r\n                                 n.MondayScheduleID,\r\n                                 n.TuesdayScheduleID,\r\n                                 n.WednesdayScheduleID,\r\n                                 n.ThursdayScheduleID,\r\n                                 n.FridayScheduleID,\r\n                                 n.SaturdayScheduleID,\r\n                                 n.SundayScheduleID,\r\n                                 n.[Subject],\r\n                                 n.DatumIndex,\r\n                                 n.ScaleID,\r\n                                 n.eDatumType,\r\n                                 n.SMSText,\r\n                                 n.VoiceText,\r\n                                 InactiveSensorID        = NULL,\r\n                                 InactiveGatewayID       = gn.GatewayID,\r\n                                 SensorNotificationID    = NULL,\r\n                                 gn.GatewayNotificationID,\r\n                                 n.CanAutoAcknowledge,\r\n                                 n.NotificationByTimeID,\r\n                                 n.HasUserNotificationAction,\r\n                                 n.HasControlAction,\r\n                                 n.HasLocalAlertAction,\r\n                                 n.HasSystemAction,\r\n\t\t\t\t\t\t\t\t n.HasResetAccAction,\r\n                                 n.HasThermostatAction,\r\n                                 NotificationTriggeredID = (SELECT TOP 1 nr.NotificationTriggeredID\r\n                                                            FROM   NotificationRecorded nr WITH (NOLOCK)\r\n                                                            WHERE  nr.NotificationID = n.NotificationID\r\n                                                                   AND nr.gatewayid = g.GatewayID\r\n                                                            ORDER  BY notificationdate DESC),\r\n                                 LocalAlertText,\r\n                                 n.PushMsgText,\r\n                                 n.IgnoreMaintenanceWindow\r\n                 FROM   dbo.[Notification] n\r\n                        INNER JOIN dbo.[GatewayNotification] gn\r\n                                ON gn.NotificationID = n.NotificationID\r\n                        INNER JOIN dbo.[Gateway] g\r\n                                ON gn.GatewayID = g.GatewayID\r\n                        LEFT JOIN dbo.[GatewayStatus] gs\r\n                               ON gs.GatewayID = g.GatewayID\r\n                        INNER JOIN dbo.[CSNet] c\r\n                                ON c.CSNetID = g.CSNetID\r\n                        INNER JOIN dbo.[NotificationRecipient] nr\r\n                                ON nr.NotificationID = n.NotificationID\r\n                 WHERE  n.eNotificationClass = 2--Inactivity Notification (Sensor)\r\n                        AND c.SendNotifications = 1\r\n                        AND Dateadd(Minute, CASE\r\n                                              WHEN Isnumeric(n.CompareValue) = 1\r\n                                                   AND CONVERT(FLOAT, n.CompareValue) > 0\r\n                                                   AND CONVERT(FLOAT, n.CompareValue) <= 20160 THEN CONVERT(FLOAT, n.CompareValue)\r\n                                              ELSE 0\r\n                                            END, Isnull(gs.LastCommunicationDate, g.LastCommunicationDate)) < Getutcdate() -- Too long since last check in (LastCommunicationDate + Notification < CurrentTime)\r\n                        AND Dateadd(Day, 14, Isnull(gs.LastCommunicationDate, g.LastCommunicationDate)) > Getutcdate() -- Has been active within the last 14 days\r\n                        AND ( n.IsActive = 1 OR n.IsActive IS NULL ) -- Only send notification for 'active' notifications\r\n                        AND ( n.IsDeleted = 0 OR n.IsDeleted IS NULL )-- Only send notification for notifications that have not been deleted\r\n                        AND (( g.resumeNotificationDate IS NULL ) OR ( g.resumeNotificationDate < Getutcdate())))\r\n\r\n        --INSERT INTO @Notify \r\n        SELECT c.*\r\n        INTO   #temp2--, case when c.notificationtriggeredid is not null then (select resettime from notificationtriggered nt where nt.NotificationTriggeredID = c.NotificationTriggeredID) else null end\r\n        FROM   CTE_Results c\r\n        OPTION(MAXDOP 1)\r\n\r\n        --nathantest\r\n        INSERT INTO @Notify\r\n        SELECT t.*\r\n        FROM   #temp2 t\r\n               LEFT JOIN dbo.[NotificationTriggered] nt WITH (NOLOCK)\r\n                      ON t.NotificationTriggeredID = nt.NotificationTriggeredID\r\n        WHERE  ( Isnull(t.ApplySnoozeByTriggerDevice, 0) = 0\r\n                 AND Dateadd(MINUTE, t.SnoozeDuration, COALESCE(t.LastSent, '1/1/1900')) < Getutcdate()) OR ( t.ApplySnoozeByTriggerDevice = 1\r\n                     AND ( nt.NotificationTriggeredID IS NULL OR Dateadd(MINUTE, CONVERT(FLOAT, t.CompareValue), Isnull(nt.resettime, Getutcdate())) < Getutcdate()));\r\n\r\n        -----------Select Non Active Sensors------------\r\n        -----------Select Active ID Sensors------------\r\n        SELECT DISTINCT NotificationID\r\n        INTO   #NotificationIDs\r\n        FROM   dbo.Notification n WITH(FORCESEEK)\r\n        WHERE  (( n.eNotificationClass = 1\r\n                   AND ( n.ApplicationID = 14\r\n                          OR n.ApplicationID = 17\r\n                          OR n.ApplicationID = 45\r\n                          OR n.ApplicationID = 66\r\n                          OR n.ApplicationID = 85 ))--Application Notification --ActiveID\r\n                  OR n.eNotificationClass = 2 )--Inactivity Notification (Sensor)\r\n               AND ( n.IsActive = 1 OR n.IsActive IS NULL ) -- Only send notification for 'active' notifications\r\n               AND ( n.IsDeleted = 0 OR n.IsDeleted IS NULL );-- Only send notification for notifications that have not been deleted\r\n\r\n        WITH CTE_Results\r\n             AS (SELECT DISTINCT n.NotificationID,\r\n                                 SensorID2               = NULL,\r\n                                 GatewayID               = NULL,\r\n                                 n.NotificationText,\r\n                                 n.eCompareType,\r\n                                 n.[Version],\r\n                                 n.CompareValue,\r\n                                 n.SnoozeDuration,\r\n                                 n.ApplySnoozeByTriggerDevice,\r\n                                 LastSent                = CASE\r\n                                              WHEN n.ApplySnoozeByTriggerDevice = 1 THEN (SELECT COALESCE(Max(rec.NotificationDate), '1/1/1900')\r\n                                                                                          FROM   NotificationRecorded rec\r\n                                                                                          WHERE  rec.NotificationID = n.NotificationID\r\n                                                                                                 AND rec.SensorID = s.SensorID)\r\n                                              ELSE n.LastSent\r\n                                            END,\r\n                                 n.[Name],\r\n                                 n.IsDeleted,\r\n                                 n.IsActive,\r\n                                 StartTime2              = Isnull(n.StartTime, '1900-01-01'),\r\n                                 EndTime                 = Isnull(n.EndTime, '1900-01-01'),\r\n                                 n.AdvancedNotificationID,\r\n                                 n.AccountID,\r\n                                 n.eNotificationClass,\r\n                                 n.ApplicationID,\r\n                                 n.Scale,\r\n                                 n.AlwaysSend,\r\n                                 n.MondayScheduleID,\r\n                                 n.TuesdayScheduleID,\r\n                                 n.WednesdayScheduleID,\r\n                                 n.ThursdayScheduleID,\r\n                                 n.FridayScheduleID,\r\n                                 n.SaturdayScheduleID,\r\n                                 n.SundayScheduleID,\r\n                                 n.[Subject],\r\n                                 n.DatumIndex,\r\n                                 n.ScaleID,\r\n                                 n.eDatumType,\r\n                                 n.SMSText,\r\n                                 n.VoiceText,\r\n                                 sn.SensorID,\r\n                                 InactiveGatewayID       = NULL,\r\n                                 sn.SensorNotificationID,\r\n                                 GatewayNotificationID   = NULL,\r\n                                 n.CanAutoAcknowledge,\r\n                                 n.NotificationByTimeID,\r\n                                 n.HasUserNotificationAction,\r\n                                 n.HasControlAction,\r\n                                 n.HasLocalAlertAction,\r\n                                 n.HasSystemAction,\r\n\t\t\t\t\t\t\t\t n.HasResetAccAction,\r\n                                 n.HasThermostatAction,\r\n                                 NotificationTriggeredID = (SELECT TOP 1 nr.NotificationTriggeredID\r\n                                                            FROM   NotificationRecorded nr WITH (NOLOCK)\r\n                                                            WHERE  nr.NotificationID = n.NotificationID\r\n                                                                   AND nr.SensorID = s.SensorID\r\n                                                            ORDER  BY notificationdate DESC),\r\n                                 LocalAlertText,\r\n                                 n.PushMsgText,\r\n                                 n.IgnoreMaintenanceWindow\r\n                 FROM   dbo.[Notification] n WITH(FORCESEEK)\r\n                        INNER JOIN #NotificationIDs ni\r\n                                ON ni.NotificationID = n.NotificationID\r\n                        INNER JOIN dbo.[SensorNotification] sn\r\n                                ON sn.NotificationID = n.NotificationID\r\n                        INNER JOIN dbo.[Sensor] s\r\n                                ON sn.SensorID = s.SensorID\r\n                        INNER JOIN dbo.[CSNet] c\r\n                                ON c.CSNetID = s.CSNetID\r\n                        INNER JOIN dbo.[NotificationRecipient] nr\r\n                                ON nr.NotificationID = n.NotificationID\r\n                 WHERE  (( n.eNotificationClass = 1\r\n                            AND ( n.ApplicationID = 14\r\n                                   OR n.ApplicationID = 17\r\n                                   OR n.ApplicationID = 45\r\n                                   OR n.ApplicationID = 66\r\n                                   OR n.ApplicationID = 85 ))--Application Notification --ActiveID\r\n                           OR n.eNotificationClass = 2 )--Inactivity Notification (Sensor)\r\n                        AND c.SendNotifications = 1\r\n                        AND Dateadd(MINUTE, CASE\r\n                                              WHEN Isnumeric(n.CompareValue) = 1\r\n                                                   AND CONVERT(FLOAT, n.CompareValue) > 0\r\n                                                   AND CONVERT(FLOAT, n.CompareValue) <= 20160 THEN CONVERT(FLOAT, n.CompareValue)\r\n                                              ELSE 0\r\n                                            END, s.LastCommunicationDate) < Getutcdate() -- Too long since last check in (LastCommunicationDate + Notification < CurrentTime)\r\n                        AND Dateadd(DAY, 14, s.LastCommunicationDate) > Getutcdate() -- Has been active within the last 14 days\r\n                        AND ( n.IsActive = 1 OR n.IsActive IS NULL ) -- Only send notification for 'active' notifications\r\n                        AND ( n.IsDeleted = 0 OR n.IsDeleted IS NULL )-- Only send notification for notifications that have not been deleted\r\n                        AND s.IsSleeping = 0 -- Don't send notifications if sensor has been put to sleep\r\n                        AND (( s.resumeNotificationDate IS NULL ) OR ( s.resumeNotificationDate < Getutcdate())))\r\n\r\n        --INSERT INTO @Notify \r\n        SELECT c.*\r\n        INTO   #temp1\r\n        FROM   CTE_Results c\r\n        OPTION(MAXDOP 1)\r\n\r\n        --nathantest\r\n        INSERT INTO @Notify\r\n        SELECT t.*\r\n        FROM   #temp1 t\r\n               LEFT JOIN dbo.[NotificationTriggered] nt WITH (NOLOCK)\r\n                      ON t.NotificationTriggeredID = nt.NotificationTriggeredID\r\n        WHERE  ( Isnull(t.ApplySnoozeByTriggerDevice, 0) = 0\r\n                 AND Dateadd(Minute, t.SnoozeDuration, COALESCE(t.LastSent, '1/1/1900')) < Getutcdate()) OR ( t.ApplySnoozeByTriggerDevice = 1\r\n                     AND ( nt.NotificationTriggeredID IS NULL OR Dateadd(MINUTE, CONVERT(FLOAT, t.CompareValue), Isnull(nt.resettime, Getutcdate())) < Getutcdate()))\r\n\r\n        -----------Return Notifications------------\r\n        SELECT NotificationID,\r\n               gatewaynotificationid,\r\n               notificationid,\r\n               sensornotificationid,\r\n               SensorID,\r\n               GatewayID,\r\n               NULL eNotificationType,\r\n               NULL CustomerToNotifyID,\r\n               NotificationText,\r\n               eCompareType,\r\n               [Version],\r\n               CompareValue,\r\n               SnoozeDuration,\r\n               ApplySnoozeByTriggerDevice,\r\n               LastSent,\r\n               [Name],\r\n               StartTime,\r\n               EndTime,\r\n               IsDeleted,\r\n               IsActive,\r\n               StartTime,\r\n               EndTime,\r\n               AdvancedNotificationID,\r\n               AccountID,\r\n               eNotificationClass,\r\n               ApplicationID,\r\n               Scale,\r\n               AlwaysSend,\r\n               MondayScheduleID,\r\n               TuesdayScheduleID,\r\n               WednesdayScheduleID,\r\n               ThursdayScheduleID,\r\n               FridayScheduleID,\r\n               SaturdayScheduleID,\r\n               SundayScheduleID,\r\n               [Subject],\r\n               DatumIndex,\r\n               ScaleID,\r\n               eDatumType,\r\n               SMSText,\r\n               VoiceText,\r\n               InactiveSensorID,\r\n               InactiveGatewayID,\r\n               SensorNotificationID,\r\n               GatewayNotificationID,\r\n               CanAutoAcknowledge,\r\n               NotificationByTimeID,\r\n               HasUserNotificationAction,\r\n               HasControlAction,\r\n               HasLocalAlertAction,\r\n               HasSystemAction,\r\n               HasThermostatAction,\r\n\t\t\t   HasResetAccAction,\r\n               LocalAlertText,\r\n               PushMsgText,\r\n               IgnoreMaintenanceWindow\r\n        FROM   @Notify;\r\n\r\n    END TRY\r\n\r\n    BEGIN CATCH\r\n\r\n        SET @ErrorNum = Error_number();\r\n        SET @ErrorProcedure = Error_procedure();\r\n        SET @ErrorSysMsg = Error_message();\r\n        DECLARE @Recipients VARCHAR(500)\r\n        DECLARE @Subject VARCHAR(30)\r\n        DECLARE @Body VARCHAR(2000)\r\n        SET @Body = '<p>Team, </p> <p>Critical Procedure Failed: '\r\n                    + @ProcName + '. Please Address. '\r\n                    + CONVERT(VARCHAR(20), Getdate())\r\n                    + '</p> <p>ErrorMessage: '\r\n                    + CONVERT(VARCHAR(20), @ErrorNum) + ' '\r\n                    + @ErrorSysMsg\r\n                    + '</p> <p>Sincerely,</p><p>-DBA</p>'\r\n        SET @Subject = 'MonnitDB ProcFail - ' + @ProcName + ''\r\n        SET @Recipients = (SELECT VALUE\r\n                           FROM   ConfigData\r\n                           WHERE  KeyName = 'DB_Procfail_Contacts')\r\n\r\n        EXEC msdb.dbo.Sp_send_dbmail\r\n          @Profile_name = 'DBAlerts',\r\n          @Recipients = @Recipients,\r\n          @subject = @Subject,\r\n          @body = @Body,\r\n          @body_format = 'HTML';\r\n\r\n    END CATCH\r\n")]
  internal class LoadNonActivity : BaseDBMethod
  {
    public List<Monnit.InactivityNotification> Result { get; private set; }

    public LoadNonActivity()
    {
      this.Result = BaseDBObject.Load<Monnit.InactivityNotification>(this.ToDataTable());
    }
  }
}
