// Decompiled with JetBrains decompiler
// Type: Monnit.Data.MaintenanceRecipient
// Assembly: Business, Version=2.5.0.6, Culture=neutral, PublicKeyToken=null
// MVID: ADEA1334-3F26-4050-9B0F-973EB7B9AD1C
// Assembly location: C:\inetpub\wwwroot\Enterprise\bin\Business.dll

using RedefineImpossible;
using System.Collections.Generic;

#nullable disable
namespace Monnit.Data;

internal class MaintenanceRecipient
{
  [DBMethod("MaintenanceRecipient_LoadRecipients")]
  [DBMethodBody(DBMS.SqlServer, "\r\nDECLARE @__MaintenanceWindowID BIGINT\r\nSET @__MaintenanceWindowID = @MaintenanceWindowID\r\n\r\nDECLARE @SeverityLevel INT\r\nSET @SeverityLevel = (SELECT SeverityLevel from MaintenanceWindow WHERE MaintenanceWindowID = @__MaintenanceWindowID)\r\n\r\nCREATE TABLE #AccountTheme\r\n(\r\n  [RowID]           INT IDENTITY(1,1),\r\n  [AccountID]       BIGINT,\r\n  [RetailAccountID] BIGINT,\r\n  [AccountTheme]    BIGINT,\r\n  [Level]           INT\r\n);\r\n\r\nCREATE TABLE #Customers\r\n(\r\n  [CustomerID]                          BIGINT,\r\n  [AccountThemeID]                      BIGINT,\r\n  [AccountID]                           BIGINT,\r\n  [FirstName]                           NVARCHAR(255),\r\n  [LastName]                            NVARCHAR(255),\r\n  [NotificationEmail]                   VARCHAR(255),\r\n  [NotificationPhone]                   VARCHAR(255),\r\n  [SMSCarrierID]                        BIGINT,\r\n  [SendMaintenanceNotificationToEmail]  BIT,\r\n  [SendMaintenanceNotificationToPhone]  BIT,\r\n  [DirectSMS]                           BIT,\r\n  [Status]                              INT,\r\n  [SeverityLevelPreference]             INT,\r\n  [TimeZoneIDString]                    VARCHAR(255)\r\n);\r\n\r\nIF @SeverityLevel = 6\r\nBEGIN\r\n\r\n    SELECT TOP 0\r\n      [CustomerID] = NULL,\r\n      [AccountThemeID] = NULL,\r\n      [AccountID] = NULL,\r\n      [FirstName] = NULL,\r\n      [LastName] = NULL,\r\n      [NotificationEmail] = NULL,\r\n      [NotificationPhone] = NULL,\r\n      1 'SendMaintenanceNotificationToEmail',\r\n      0 'SendMaintenanceNotificationToPhone',\r\n      [SMSCarrierID] = NULL,\r\n      [DirectSMS] = NULL,\r\n      [Status] = NULL,\r\n      MaintenanceWindowCustomerID = NULL\r\n\r\n\r\nEND ELSE\r\nBEGIN\r\n\r\n    INSERT INTO #Customers\r\n    (\r\n      [CustomerID],\r\n      [AccountID],\r\n      [FirstName],\r\n      [LastName],\r\n      [NotificationEmail],\r\n      [NotificationPhone],\r\n      [SMSCarrierID],\r\n      [SendMaintenanceNotificationToEmail],\r\n      [SendMaintenanceNotificationToPhone],\r\n      [DirectSMS],\r\n      [Status],\r\n      TimeZoneIDString\r\n     )    \r\n    SELECT\r\n      c.[CustomerID],\r\n      c.[AccountID],\r\n      c.[FirstName],\r\n      c.[LastName],\r\n      c.[NotificationEmail],\r\n      c.[NotificationPhone],\r\n      c.[SMSCarrierID],\r\n      1 'SendMaintenanceNotificationToEmail',\r\n      0 'SendMaintenanceNotificationToPhone',\r\n      c.[DirectSMS],\r\n      mwc.[Status],\r\n      t.TimeZoneIDString\r\n    FROM dbo.[Customer] c \r\n    INNER JOIN dbo.[Account] a ON c.AccountID = a.AccountID\r\n    INNER JOIN dbo.[TimeZone] t ON a.TimeZoneID = t.TimeZoneID\r\n    LEFT JOIN dbo.[MaintenanceWindowQueue] mwc ON mwc.[CustomerID] = c.[CustomerID] AND mwc.[MaintenanceWindowID] = @__MaintenanceWindowID --AND mwc.Type = 1\r\n    WHERE c.[IsActive]                    = 1\r\n      AND c.[IsDeleted]                   = 0\r\n      AND (mwc.[MaintenanceWindowQueueID] IS NULL)\r\n      --AND DATEPART(HOUR, dbo.GetLocalTime(GETUTCDATE(), t.TimeZoneIDSTring)) BETWEEN 8 AND 19           --Added 2019-10-08 only create/pickup requests between 8 am and 8 pm local to customer\r\n    ORDER BY dbo.GetLocalTime(GETUTCDATE(), t.TimeZoneIDSTring) desc;          --send initial requests first then resend failures\r\n\r\n     WITH CTE_AccountTheme AS\r\n    (\r\n      SELECT\r\n        [Level] = 1,\r\n        a.[AccountID],\r\n        a.[RetailAccountID]\r\n      FROM dbo.[Account] a WITH (NOLOCK)\r\n      INNER JOIN #Customers c ON a.[AccountID] = c.[AccountID]\r\n      UNION ALL\r\n      SELECT\r\n        [Level] = c.[Level] + 1,\r\n        c.[AccountID],\r\n        a.[RetailAccountID]   \r\n      FROM CTE_AccountTheme c\r\n      INNER JOIN dbo.[Account] a WITH (NOLOCK) ON c.[RetailAccountID] = a.[AccountID]\r\n    )\r\n\r\n    INSERT INTO #AccountTheme\r\n    (\r\n      [AccountID],\r\n      [RetailAccountID],\r\n      [AccountTheme],\r\n      [Level] \r\n    )\r\n    SELECT DISTINCT\r\n      a.[AccountID], \r\n      a.[RetailAccountID],\r\n      a.[AccountThemeID], \r\n      a.[Level] \r\n    FROM (\r\n          SELECT \r\n            a.*, \r\n            at.[AccountThemeID] \r\n          FROM CTE_AccountTheme a\r\n          INNER JOIN dbo.[AccountTheme] at WITH (NOLOCK) ON a.[AccountID] = at.[AccountID]\r\n          WHERE a.[RetailAccountID] IS NULL\r\n            AND at.[IsActive] = 1\r\n          UNION ALL\r\n          SELECT \r\n            a.*, \r\n            at.[AccountThemeID] \r\n          FROM cte_accounttheme a\r\n          INNER JOIN dbo.[AccountTheme] at WITH (NOLOCK) ON a.[RetailAccountID] = at.[AccountID]\r\n          WHERE at.[IsActive] = 1 \r\n         ) a\r\n    ORDER BY a.AccountID, a.Level;\r\n\r\n    SELECT \r\n      [ROW_NUMBER] = ROW_NUMBER() OVER (PARTITION BY [AccountID] ORDER BY [RowID]),\r\n      * \r\n    INTO #temp2\r\n    FROM #AccountTheme\r\n    ORDER BY [AccountID], [RowID];\r\n\r\n\r\n    UPDATE c\r\n      SET c.[AccountThemeID] = t.[AccountTheme]\r\n    FROM #Customers c\r\n    INNER JOIN #temp2 t on c.[AccountID] = t.[AccountID]\r\n    WHERE t.ROW_NUMBER = 1;\r\n\r\n    UPDATE c \r\n    SET SeverityLevelPreference = CASE WHEN tp.DefaultValue IS NULL AND ap.Value IS NULL AND cp.Value IS NULL THEN t.DefaultValue ELSE \r\n      CASE WHEN ISNULL(tp.AccountCanOverride, 1) = 1 AND ISNULL(tp.CustomerCanOverride, 1) = 1 THEN ISNULL(ISNULL(cp.Value, ap.Value), tp.DefaultValue) ELSE\r\n      CASE WHEN ISNULL(tp.AccountCanOverride, 1) = 1 AND ISNULL(tp.CustomerCanOverride, 1) = 0 THEN ISNULL(ap.Value, tp.DefaultValue) ELSE\r\n      tp.DefaultValue\r\n    END END END \r\n    FROM #customers c\r\n    LEFT JOIN dbo.[Preference] cp WITH (NOLOCK) ON cp.[CustomerID] = c.CustomerID AND cp.[PreferenceTypeID] = 16\r\n    LEFT JOIN dbo.[Preference] ap WITH (NOLOCK) on c.AccountID = ap.AccountID AND ap.PreferenceTypeID = 16\r\n    LEFT JOIN dbo.[AccountThemePreferenceTypeLink] tp WITH (NOLOCK) on c.AccountThemeID = tp.AccountThemeID AND tp.PreferenceTypeID = 16\r\n    LEFT JOIN dbo.[PreferenceType] t with (NOLOCK) on t.PreferenceTypeID = 16;\r\n\r\n    INSERT INTO MaintenanceWindowQueue\r\n    SELECT *, @__MaintenanceWindowID FROM #Customers    \r\n\r\n    SELECT top 600\r\n    c.*,\r\n    ExistingStatus = mcw.Status\r\n    INTO #results \r\n    FROM MaintenanceWindowQueue c\r\n    INNER JOIN dbo.[MaintenanceWindow] m WITH (NOLOCK) on c.SeverityLevelPreference <= m.severitylevel and c.MaintenanceWindowID = m.MaintenanceWindowID\r\n    LEFT JOIN MaintenanceWindowCustomer mcw WITH (NOLOCK) ON c.CustomerID = mcw.CustomerID and c.MaintenanceWindowID = mcw.MaintenanceWindowID AND mcw.Type = 1\r\n    WHERE c.MaintenanceWindowID = @__MaintenanceWindowID\r\n    AND (mcw.MaintenanceWindowCustomerID IS NULL OR (mcw.[Status] = 3 AND mcw.[AttemptCount] < 3))\r\n    AND DATEPART(HOUR, dbo.GetLocalTime(GETUTCDATE(), c.TimeZoneIDSTring)) BETWEEN 8 AND 19  \r\n    ORDER BY dbo.GetLocalTime(GETUTCDATE(), c.TimeZoneIDSTring) desc\r\n\r\n    INSERT INTO MaintenanceWindowCustomer (CustomerID, MaintenanceWindowID, Type)\r\n    SELECT CustomerID, @__MaintenanceWindowID, 1 FROM #results where ExistingStatus IS NULL\r\n\r\n    UPDATE m\r\n    SET m.[Status]       = 1, \r\n        m.[AttemptCount] = m.[AttemptCount] + 1,\r\n        m.[ModifiedDate] = GETUTCDATE()\r\n    FROM #Results c\r\n    INNER JOIN dbo.[MaintenanceWindowCustomer] m ON c.[CustomerID] = m.[CustomerID] AND m.[MaintenanceWindowID] = @__MaintenanceWindowID\r\n    WHERE c.ExistingStatus = 3;\r\n\r\n    SELECT\r\n      c.[CustomerID],\r\n      c.[AccountThemeID],\r\n      c.[AccountID],\r\n      c.[FirstName],\r\n      c.[LastName],\r\n      c.[NotificationEmail],\r\n      c.[NotificationPhone],\r\n      c.[SMSCarrierID],\r\n      c.[SendMaintenanceNotificationToEmail],\r\n      c.[SendMaintenanceNotificationToPhone],\r\n      c.[DirectSMS],\r\n      c.[Status],\r\n      m.MaintenanceWindowCustomerID\r\n    FROM #Results c\r\n    INNER JOIN MaintenanceWindowCustomer m ON c.[CustomerID] = m.[CustomerID] \r\n    WHERE m.[MaintenanceWindowID] = @__MaintenanceWindowID\r\n      AND m.Type = 1;\r\n\r\nEND")]
  internal class LoadRecipients : BaseDBMethod
  {
    [DBMethodParam("MaintenanceWindowID", typeof (long))]
    public long MaintenanceWindowID { get; private set; }

    public List<Monnit.MaintenanceRecipient> Result { get; private set; }

    public LoadRecipients(long maintenanceWindowID)
    {
      this.MaintenanceWindowID = maintenanceWindowID;
      this.Result = BaseDBObject.Load<Monnit.MaintenanceRecipient>(this.ToDataTable());
    }
  }
}
